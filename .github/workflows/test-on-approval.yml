name: Infrastructure Tests

on:
  pull_request_review:
    types: [submitted]
  push:
    branches-ignore: [main] # Only trigger on PR branches
    paths:
      # Terraform modules only (exclude README, docs)
      - "aws/modules/**/*.tf"
      - "gcp/modules/**/*.tf"
      - "azure/modules/**/*.tf"
      - "kubernetes/modules/**/*.tf"
      - "kubernetes/modules/**/*.yaml"
      - "kubernetes/modules/**/*.yml"
      # Test code only (exclude README, .env files)
      - "test/aws/**/*.go"
      - "test/gcp/**/*.go"
      - "test/azure/**/*.go"
      - "test/aws/**/*.tf"
      - "test/gcp/**/*.tf"
      - "test/azure/**/*.tf"
      # Shared test utilities (affects all clouds)
      - "test/utils/**"
      - "test/*.go"
      - "test/go.mod"
      - "test/go.sum"
      # Workflow changes
      - ".github/workflows/test-*.yml"

# Prevent resource conflicts - only one workflow instance per branch
concurrency:
  group: infra-tests-${{ github.ref_name }}
  cancel-in-progress: false # Don't cancel running tests

permissions:
  id-token: write
  contents: read
  pull-requests: read
  statuses: write

jobs:
  check-approval:
    name: Check PR Approval Status
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.decision.outputs.should-run }}
      cloud-changes: ${{ steps.changes.outputs.changes }}
    steps:
      - name: Check for existing workflow runs
        id: existing-runs
        uses: actions/github-script@v7
        with:
          script: |
            // Handle different event types
            let currentSha, prNumber;

            if (context.eventName === 'pull_request_review') {
              currentSha = context.payload.pull_request.head.sha;
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'push') {
              currentSha = context.sha;
              // For push events, we need to find the PR
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                state: 'open'
              });
              
              if (prs.length === 0) {
                console.log('‚ö†Ô∏è No open PR found for this push event - skipping infrastructure tests');
                console.log('üí° Create a PR to enable approval-gated testing');
                core.setOutput('existing-count', 0);
                core.setOutput('pr-number', '');
                core.setOutput('current-sha', currentSha);
                core.setOutput('no-pr', 'true');
                return 0;
              }
              
              prNumber = prs[0].number;
              console.log(`üìã Found PR #${prNumber} for push to ${context.ref}`);
            } else {
              console.log(`‚ö†Ô∏è Unexpected event type: ${context.eventName}`);
              core.setOutput('existing-count', 0);
              return 0;
            }

            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test-on-approval.yml',
              status: 'in_progress',
              per_page: 100
            });

            const prRuns = runs.workflow_runs.filter(run => 
              run.head_sha === currentSha &&
              run.id !== context.runId  // Exclude current run
            );

            console.log(`Found ${prRuns.length} existing runs for commit ${currentSha.substring(0,8)}`);
            console.log('Existing run details:', prRuns.map(r => `${r.id} (${r.status})`));
            core.setOutput('existing-count', prRuns.length);

            // Store for later steps
            core.setOutput('pr-number', prNumber);
            core.setOutput('current-sha', currentSha);

            return prRuns.length;

      - name: Check if PR is approved (with debouncing)
        id: approval
        if: ${{ steps.existing-runs.outputs.no-pr != 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            // Wait a few seconds to catch rapid multiple approvals/pushes
            await new Promise(resolve => setTimeout(resolve, 5000));

            const prNumber = ${{ steps.existing-runs.outputs.pr-number }};

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            // Get the latest review from each reviewer
            const reviewers = new Map();
            reviews
              .sort((a, b) => new Date(b.submitted_at) - new Date(a.submitted_at))
              .forEach(review => {
                if (!reviewers.has(review.user.login)) {
                  reviewers.set(review.user.login, review);
                }
              });

            const approvedReviews = Array.from(reviewers.values())
              .filter(review => review.state === 'APPROVED');

            const isApproved = approvedReviews.length > 0;

            console.log(`PR #${prNumber} approval status:`);
            console.log(`- Total unique reviewers: ${reviewers.size}`);
            console.log(`- Approved by: ${approvedReviews.map(r => r.user.login).join(', ')}`);
            console.log(`- Final approval status: ${isApproved}`);

            core.setOutput('approved', isApproved);
            core.setOutput('approver-count', approvedReviews.length);

      - name: Check for infrastructure changes
        id: changes
        if: ${{ steps.existing-runs.outputs.no-pr != 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.existing-runs.outputs.pr-number }};

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const changedClouds = [];

            // Helper function to check if file is infrastructure-related (not docs/config)
            const isInfraFile = (filename) => {
              // Terraform files
              if (filename.endsWith('.tf')) return true;
              // Kubernetes manifests  
              if (filename.endsWith('.yaml') || filename.endsWith('.yml')) return true;
              // Go test files
              if (filename.endsWith('.go')) return true;
              // Go modules
              if (filename.endsWith('go.mod') || filename.endsWith('go.sum')) return true;
              // Workflow files
              if (filename.includes('.github/workflows/test-')) return true;
              return false;
            };

            // Check for shared changes that affect ALL clouds
            const hasSharedChanges = files.some(f => 
              (f.filename.startsWith('test/utils/') || 
               f.filename.startsWith('kubernetes/modules/') ||
               f.filename.match(/^test\/(go\.mod|go\.sum|.*\.go)$/)) && 
              isInfraFile(f.filename)
            );

            if (hasSharedChanges) {
              console.log('üåê Shared infrastructure changes detected - running all cloud tests');
              changedClouds.push('aws', 'gcp', 'azure');
            } else {
              // Check for cloud-specific changes (only if no shared changes)
              
              // AWS-specific changes
              if (files.some(f => 
                ((f.filename.startsWith('aws/modules/') && isInfraFile(f.filename)) ||
                 (f.filename.startsWith('test/aws/') && isInfraFile(f.filename)) ||
                 f.filename === '.github/workflows/test-aws.yml')
              )) {
                changedClouds.push('aws');
              }
              
              // GCP-specific changes  
              if (files.some(f => 
                ((f.filename.startsWith('gcp/modules/') && isInfraFile(f.filename)) ||
                 (f.filename.startsWith('test/gcp/') && isInfraFile(f.filename)) ||
                 f.filename === '.github/workflows/test-gcp.yml')
              )) {
                changedClouds.push('gcp');
              }
              
              // Azure-specific changes
              if (files.some(f => 
                ((f.filename.startsWith('azure/modules/') && isInfraFile(f.filename)) ||
                 (f.filename.startsWith('test/azure/') && isInfraFile(f.filename)) ||
                 f.filename === '.github/workflows/test-azure.yml')
              )) {
                changedClouds.push('azure');
              }
            }

            console.log(`Changed clouds: ${changedClouds.join(', ')}`);
            core.setOutput('changes', changedClouds.join(','));

      - name: Make final run decision
        id: decision
        uses: actions/github-script@v7
        with:
          script: |
            // Skip if no PR exists
            if ('${{ steps.existing-runs.outputs.no-pr }}' === 'true') {
              console.log('‚è∏Ô∏è Skipping: No PR exists for this branch');
              console.log('üí° Create a PR to enable infrastructure tests');
              core.setOutput('should-run', false);
              return;
            }

            const existingRuns = ${{ steps.existing-runs.outputs.existing-count }};
            const isApproved = '${{ steps.approval.outputs.approved }}' === 'true';
            const hasChanges = '${{ steps.changes.outputs.changes }}' !== '';

            const shouldRun = isApproved && hasChanges && existingRuns === 0;

            const triggerEvent = context.eventName;
            console.log('Run decision factors:');
            console.log(`- Trigger event: ${triggerEvent}`);
            console.log(`- Is approved: ${isApproved}`);
            console.log(`- Has infrastructure changes: ${hasChanges}`);
            console.log(`- Existing runs for this commit: ${existingRuns}`);
            console.log(`- Final decision: ${shouldRun ? 'RUN' : 'SKIP'}`);

            if (!shouldRun) {
              if (!isApproved) console.log('‚è∏Ô∏è Skipping: PR not approved');
              if (!hasChanges) console.log('‚è∏Ô∏è Skipping: No infrastructure changes');  
              if (existingRuns > 0) console.log(`‚è∏Ô∏è Skipping: Tests already running for this commit`);
            } else {
              console.log(`üöÄ Running tests (triggered by ${triggerEvent})`);
            }

            core.setOutput('should-run', shouldRun);

  test-aws:
    name: AWS Tests
    needs: check-approval
    if: ${{ needs.check-approval.outputs.should-run == 'true' && contains(needs.check-approval.outputs.cloud-changes, 'aws') }}
    uses: ./.github/workflows/test-aws.yml
    secrets: inherit

  test-gcp:
    name: GCP Tests
    needs: check-approval
    if: ${{ needs.check-approval.outputs.should-run == 'true' && contains(needs.check-approval.outputs.cloud-changes, 'gcp') }}
    uses: ./.github/workflows/test-gcp.yml
    secrets: inherit

  # test-azure:
  #   name: Azure Tests
  #   needs: check-approval
  #   if: ${{ needs.check-approval.outputs.should-run == 'true' && contains(needs.check-approval.outputs.cloud-changes, 'azure') }}
  #   uses: ./.github/workflows/test-azure.yml
  #   secrets: inherit
